<template>
	<view class="play-page" :style="{height:winHeight + 'px'}">
		<!-- <view class="status-bar" :style="{height:statusBarHeight + 'px'}"></view> -->
		<view>
			<video id="videoContext" class="play-vedio" :style="{height:winHeight + 'px'}" :src="videoSrc" v-if="isVideo" :controls="true" :page-gesture="true" :show-center-play-btn="false" @fullscreenchange="fullscreenchange" @fullscreenclick="fullscreenclick" @controlstoggle="controlstoggle" @error="handleVideoError" @pause="handleVideoPause" @play="handleVideoPlay" @ended="handleVideoEnded" @timeupdate="handleVideoTimeupdate" :title="videoName" :show-back-btn="true" :show-fullscreen-btn="true" :enable-play-gesture="true" @click="handleVideoClick" codec="hardware" :play-strategy="3">
				<!-- 播放器菜单 -->
				<cover-view class="video-controls" :class="(isShowVideoControls&&!showVideoControlsMenu)?'video-controls-show':'video-controls-hide'" :style="fullScreen?{height:(winWidth-25)+'px'}:{height:'450rpx'}">
					<view class="video-controls-menu" @click.stop="showVideoControlsMenuFun('rate',$event)">
						<text class="video-controls-menu-text">{{videoRate===1?'倍速':videoRate+'x'}}</text>
					</view>
				</cover-view>
				<!-- 播放器菜单-选择倍速 -->
				<cover-view class="video-controls" :class="(isShowVideoControls&&showVideoControlsMenu==='rate')?'video-controls-show':'video-controls-hide'" :style="fullScreen?{height:(winWidth-25)+'px'}:{height:'450rpx'}">
					<view v-for="(item,index) in videoRateList" :key="'rate'+index" class="video-controls-menu" @click.stop="playbackRate(item,$event)">
						<text class="video-controls-menu-text" :class="{'video-controls-menu-active':videoRate===item}">{{item}}x</text>
					</view>
				</cover-view>

				<!-- 视频返回 -->
				<cover-view class="video-back" v-if="!fullScreen" @click.stop="toHome">
					<image class="video-back-img" src="../../static/icon-back.png"></image>
				</cover-view>
				<!-- ios-全屏下显示视频返回 -->
				<cover-view v-if="platformIOS" class="video-title" :class="(fullScreen&&isShowVideoControls)?'video-title-show':'video-title-hide'" :style="{width:winHeight+'px',paddingLeft:statusBarHeight+'px'}">
					<image class="video-back-img" src="/static/icon-back.png"></image>
					<text class="video-title-text">{{videoName}}</text>
				</cover-view>
				
				<!-- 视频加载 -->
				<cover-view style="position: absolute; left: 0; top: 0; background-color: #000000;" :style="{width: winWidth + 'px',height:winHeight + 'px'}" v-if="!isLoading">
					<loading-view position="center"></loading-view>
				</cover-view>
			</video>
		</view>
	</view>
</template>

<script>
	const deviceInfo = uni.getSystemInfoSync();
	import http from '@/utils/request.js';
	import config from '@/utils/config.js';
	import loadingView from '@/components/loading-view.vue';
	import {
		mapState,
		mapMutations
	} from 'vuex';
	export default {
		components: {
			loadingView
		},
		computed: {
			...mapState({
				userInfo: state => state.userInfo,
			})
		},
		data() {
			return {
				videoInfo: {},
				platformIOS: deviceInfo.platform === 'ios',
				winHeight: deviceInfo.windowHeight,
				winWidth: deviceInfo.windowWidth,
				statusBarHeight: deviceInfo.statusBarHeight,
				safeAreaHeight: deviceInfo.windowHeight - deviceInfo.safeArea.bottom,
				controlsState: false, // 播放器菜单显示状态
				isShowVideoControls: false, // 播放器自定义菜单显示状态
				showVideoControlsMenu: '', // 显示菜单内容 空表示显示主菜单 rate-表示设置倍速 clarity-表示设置分辨率
				showVideoControlsTime: 8, // 播放器自定义菜单显示时间s
				videoRate: 1, // 当前播放倍速
				videoRateList: [0.5, 1, 1.5, 2], // 当前播放倍速
				isVideo: true,
				fullScreen: true,
				videoId: "", // 视频id
				videoSrc: "", // 视频地址
				videoName: "", // 视频名称
				videoPlayState: 0, // 视频播放状态 0-初始 1-暂停 2-播放完 3-试看完成
				isLoading: false,
			}
		},
		onShow: function() {
			// this.isVideo = true;
		},
		onHide: function() {
			// this.isVideo = false;
			this.videoContext.pause();

			this.isShowVideoControls = false;
			this.cacheVideoPlayTime();
		},
		onUnload: function() {
			this.videoContext.pause();

			if (this.showVideoControlsCountdownFun) {
				clearInterval(this.showVideoControlsCountdownFun);
			}
			this.isShowVideoControls = false;
			this.cacheVideoPlayTime();
		},
		onLoad: function(option) {
			if (option && option.data) {
				const data = JSON.parse(option.data);
				this.videoId = data.id;
				this.videoSrc = data.url;
				this.videoName = decodeURIComponent(data.name);
			}
		},
		onReady: function(res) {
			this.videoContext = uni.createVideoContext('videoContext');
			this.$nextTick(() => {
				// this.videoContext.requestFullScreen();
				// this.videoContext.play();
				setTimeout(() => {
					this.isLoading = true;
					this.videoContext.requestFullScreen();
					this.videoContext.play();
				}, 1000)
			})
		},
		methods: {
			toHome() {
				this.videoContext.exitFullScreen();
				uni.navigateBack();
			},
			// 播放错误时触发
			handleVideoError(e) {
				uni.showToast({
					icon: "none",
					title: e
				})
			},
			// 暂停播放
			handleVideoPause(e) {
				this.videoPlayState = 1;
			},
			// 播放
			handleVideoPlay(e) {
				this.videoPlayState = 0;
			},
			// 播放到末尾
			handleVideoEnded(e) {
				this.videoPlayState = 2;
			},
			// 播放进度变化
			handleVideoTimeupdate(e) {
				const {
					currentTime,
					duration
				} = e.detail;
				this.videoPlayTime = parseInt(currentTime); // 记录播放秒数
			},
			// 记录缓存视频播放时间
			cacheVideoPlayTime() {
				const cacheVideoPlayTimeList = uni.getStorageSync('cacheVideoPlayTimeList');
				if (cacheVideoPlayTimeList && cacheVideoPlayTimeList.find(item => item.videoId === this.videoId && item.videoUrl === this.videoSrc)) {
					cacheVideoPlayTimeList.forEach(item => {
						if (item.videoId === this.videoId && item.videoUrl === this.videoSrc) {
							item.playTime = this.videoPlayTime;
						}
					})
					uni.setStorageSync('cacheVideoPlayTimeList', cacheVideoPlayTimeList);
				} else {
					const newData = cacheVideoPlayTimeList || [];
					newData.push({
						videoId: this.videoId,
						playTime: this.videoPlayTime,
						videoUrl: this.videoSrc
					})
					uni.setStorageSync('cacheVideoPlayTimeList', newData);
				}
			},
			// 全屏时触发
			fullscreenchange(e) {
				const {
					fullScreen,
					direction
				} = e.detail;
				// 退出横屏
				if (!fullScreen) {
					plus.screen.lockOrientation("portrait-primary");
					uni.navigateBack();
				}
				this.fullScreen = fullScreen;
			},
			// 视频播放全屏播放时点击事件
			fullscreenclick(e) {
				const {
					screenX,
					screenY
				} = e.detail;
				// ios 全屏返回按钮
				if (screenY <= 40 && screenX < 100 && this.platformIOS) {
					this.videoContext.exitFullScreen();
				}
			},
			// 切换 controls 显示隐藏时触发
			controlstoggle(e) {
				this.controlsState = e.detail.show;
				if (e.detail.show) {
					this.isShowVideoControls = true;

					// 倒计时隐藏自定义菜单
					if (this.showVideoControlsCountdownFun) {
						clearInterval(this.showVideoControlsCountdownFun);
					}
					this.showVideoControlsCountdown();
				}
			},
			// 播放器菜单显示倒计时
			showVideoControlsCountdown() {
				this.showVideoControlsCountdownFun = setInterval(() => {
					this.showVideoControlsTime--;
					if (this.showVideoControlsTime === 0) {
						clearInterval(this.showVideoControlsCountdownFun);
						this.showVideoControlsTime = 8;
						this.isShowVideoControls = false;
						this.showVideoControlsMenu = '';
					}
				}, 1000);
			},
			// 打开对应的功能菜单
			showVideoControlsMenuFun(meun, e) {
				if (e) e.stopPropagation();
				this.showVideoControlsTime = 8;
				this.showVideoControlsMenu = meun;
			},
			// 设置播放倍速
			playbackRate(rate, e) {
				if (e) e.stopPropagation();
				this.showVideoControlsTime = 8;
				this.videoContext.playbackRate(rate);
				this.videoRate = rate;
				// 倒计时隐藏自定义菜单
				if (this.showVideoControlsCountdownFun) {
					clearInterval(this.showVideoControlsCountdownFun);
				}
				this.isShowVideoControls = false;
				this.showVideoControlsMenu = '';
			},

			// 监听播放点击事件
			handleVideoClick() {
				// ios 模拟假双击 - 用于双击播放暂停切换
				if (deviceInfo.platform === 'ios') {
					const currentTime = new Date().getTime();
					// 双击
					if (this.clickNumber && currentTime - this.clickNumber <= 250) {
						console.log("handleVideoClick===双击=>")
						if (this.videoPlayState === 0) {
							this.videoContext.pause();
						} else if (this.videoPlayState === 1) {
							this.videoContext.play();
						}
					}
					this.clickNumber = currentTime;
				}

				// 隐藏自定义菜单
				if (this.isShowVideoControls) {
					if (this.showVideoControlsCountdownFun) {
						clearInterval(this.showVideoControlsCountdownFun);
					}
					this.showVideoControlsTime = 8;
					this.isShowVideoControls = false;
					this.showVideoControlsMenu = '';
				}
			}
		}
	}
</script>

<style scoped>
	.flex-row {
		flex-direction: row;
	}

	.play-page {
		width: 750rpx;
	}

	.status-bar {
		background-color: #000000;
	}

	.play-vedio {
		width: 750rpx;
	}

	.video-back {
		position: absolute;
		top: 0;
		z-index: 999;
	}

	.video-back-img {
		width: 21rpx;
		height: 42rpx;
		margin-top: 10rpx;
		margin-left: 30rpx;
		margin-right: 30rpx;
		margin-bottom: 10rpx;
	}

	.video-title-show {
		transform: translateY(80rpx);
	}

	.video-title-hide {
		transform: translateY(0rpx);
	}

	.video-title {
		position: absolute;
		left: 0;
		top: -80rpx;
		z-index: 999;
		height: 80rpx;
		background-color: rgba(0, 0, 0, .3);
		align-items: center;
		justify-content: flex-start;
		flex-direction: row;
		flex-wrap: nowrap;
		transition-property: transform;
		transition-duration: 0.3s;
		transition-timing-function: ease-in-out;
	}

	.video-title-text {
		color: #FFFFFF;
		font-size: 28rpx;
		flex: 1;
		lines: 1;
		text-overflow: ellipsis;
	}

	.video-cover {
		width: 750rpx;
		height: 500rpx;
		position: absolute;
		top: 0;
		justify-content: center;
		align-items: center;
		background-color: rgba(0, 0, 0, .7);
	}

	.video-play {
		width: 120rpx;
		height: 120rpx;
		margin-bottom: 10rpx;
	}

	.video-play-text {
		color: #FFFFFF;
		font-size: 28rpx;
	}

	.video-play-number {
		color: #ff7f00;
		font-size: 28rpx;
	}

	.video-pay-btn {
		/* position: absolute;
		right: 10rpx;
		top: 10rpx; */
		font-weight: 500;
		color: #FFFFFF;
		font-size: 24rpx;
		border-radius: 50rpx;
		padding: 0 30rpx;
		height: 54rpx;
		line-height: 54rpx;
		background-image: linear-gradient(to right, #ffc400, #ff7f00);
	}

	.video-controls-show {
		transform: translateX(0rpx);
	}

	.video-controls-hide {
		transform: translateX(160rpx);
	}

	.video-controls {
		position: absolute;
		top: 0;
		right: 10rpx;
		width: 120rpx;
		height: 450rpx;
		align-items: center;
		justify-content: center;
		transition-property: transform;
		transition-duration: 0.3s;
		transition-timing-function: ease-in-out;
	}

	.video-controls-menu {
		background-color: rgba(0, 0, 0, .3);
		width: 120rpx;
		height: 80rpx;
		margin: 5rpx 0;
		border-radius: 10rpx;
		align-items: center;
		justify-content: center;
	}

	.video-controls-menu-text {
		color: #ffffff;
		font-size: 28rpx;
	}

	.video-controls-menu-active {
		color: #ff7f00;
	}

	.video-advert {
		width: 750rpx;
		height: 500rpx;
		position: absolute;
		top: 0;
	}

	.video-advert-img {
		width: 750rpx;
		height: 500rpx;
	}

	.count-down {
		width: 100rpx;
		height: 60rpx;
		background-color: #808080;
		border-radius: 40%;
		position: absolute;
		right: 10rpx;
		top: 10rpx;
	}

	.count-down-text {
		font-size: 30rpx;
		color: #FFFFFF;
		text-align: center;
		line-height: 60rpx;
	}

	.close-advert {
		width: 60rpx;
		height: 60rpx;
	}

	.video-advert-stop {
		justify-content: center;
		align-items: center;
		left: 375rpx;
		top: 250rpx;
		width: 460rpx;
		height: 280rpx;
		margin-left: -230rpx;
		margin-top: -140rpx;
	}

	.video-advert-top-img {
		width: 460rpx;
		height: 280rpx;
	}

	/* 试看结束提示 */
	.haveatry-tip-text1 {
		font-weight: 500;
		color: #ff7f00;
		font-size: 36rpx;
		text-align: center;
	}

	.haveatry-tip-text2 {
		color: #ffffff;
		font-size: 28rpx;
	}

	.haveatry-tip-btn1 {
		width: 240rpx;
		height: 76rpx;
		flex-direction: row;
		align-items: center;
		justify-content: center;
		border-style: solid;
		border-color: #FFFFFF;
		border-width: 2rpx;
		border-radius: 76rpx;
		font-weight: 500;
		color: #ffffff;
		font-size: 32rpx;
	}

	.haveatry-tip-btn-text {
		font-weight: 500;
		color: #ffffff;
		font-size: 32rpx;
	}

	.haveatry-tip-btn2 {
		width: 240rpx;
		height: 76rpx;
		justify-content: center;
		align-items: center;
		border-radius: 76rpx;
		background-image: linear-gradient(to right, #ffc400, #ff7f00);
	}

	.tabs {
		flex: 1;
	}

	.tab-header {
		height: 80rpx;
		flex-direction: row;
		flex-wrap: nowrap;
		justify-content: center;
		align-items: center;
		background-color: #FFFFFF;
		box-shadow: 0px 2px 3px rgba(0, 0, 0, 0.08);
	}

	.tab-header-item {
		flex-direction: row;
		flex-wrap: nowrap;
		align-items: flex-start;
		justify-content: center;
		padding: 0 100rpx;
	}

	.tab-header-tbox {
		height: 80rpx;
		justify-content: center;
		align-items: center;
	}

	.tab-header-text {
		color: #222222;
		font-size: 32rpx;
		height: 74rpx;
		line-height: 80rpx;
	}

	.tab-header-text-active {
		width: 52rpx;
		height: 6rpx;
		border-radius: 6rpx;
		background-color: #ff7f00;
	}

	.tab-header-count {
		color: #ff7f00;
		font-size: 24rpx;
		line-height: 80rpx;
	}

	.tab-view {
		flex: 1;
	}

	.scroll-view {
		flex: 1;
		padding: 0 30rpx;
	}

	/* 视频板块样式 */
	.advert-img {
		width: 690rpx;
		height: 128rpx;
		margin: 20rpx 0;
	}

	.video-name {
		font-weight: 500;
		color: #222222;
		font-size: 32rpx;
		margin-top: 10rpx;
	}

	.video-info-text {
		color: #7c7c7c;
		font-size: 24rpx;
		margin-right: 20rpx;
	}

	.video-lable {
		border-radius: 8rpx;
		background-color: rgba(237, 237, 237, 0.5);
		color: #7c7c7c;
		font-size: 24rpx;
		height: 50rpx;
		line-height: 50rpx;
		padding: 0 15rpx;
		margin: 6rpx 12rpx 6rpx 0;
	}

	.video-count {
		flex-direction: row;
		flex-wrap: nowrap;
		justify-content: space-between;
		align-items: center;
		margin: 16rpx 0;
	}

	.video-count-item {
		justify-content: center;
		flex-direction: column;
		align-items: center;
		padding: 0 10rpx;
		padding-top: 32rpx;
	}

	.video-count-icon {
		width: 58rpx;
		height: 58rpx;
	}

	.video-count-text {
		color: #9caac3;
		font-size: 24rpx;
		margin-top: 4rpx;
		height: 40rpx;
	}

	.redSize {
		width: 100rpx;
		height: 80rpx;
		position: absolute;
		/* background-color: rgba(255, 127, 0, .5); */
		right: -20rpx;
		top: 0;
	}

	.redSize-image {
		width: 68rpx;
		height: 30rpx;
		position: relative;
	}

	.redSize-text {
		width: 68rpx;
		height: 30rpx;
		color: #fff;
		font-weight: 600;
		font-size: 16rpx;
		line-height: 30rpx;
		padding: 1rpx 2rpx;
		text-align: center;
		position: absolute;
		top: 0;
		left: 0;
	}

	/* 相关推荐 */
	.remd {
		margin: 10rpx 0;
	}

	.remd-header {
		flex-direction: row;
		flex-wrap: nowrap;
		justify-content: space-between;
		align-items: center;
		margin: 10rpx 0;
		height: 40rpx;
	}

	.remd-header-row {
		flex-direction: row;
		flex-wrap: nowrap;
		align-items: center;
	}

	.remd-header-more {
		color: #9CAAC3;
		font-size: 28rpx;
	}

	.remd-header-title {
		font-weight: 500;
		color: #222222;
		font-size: 32rpx;
		margin-left: 8rpx;
		margin-right: 100rpx;
		lines: 1;
		text-overflow: ellipsis;
		flex: 1;
	}

	.remd-content {
		flex-direction: row;
		flex-wrap: wrap;
		justify-content: space-between;
	}

	.remd-item {
		margin: 20rpx 0 10rpx 0;
		width: 330rpx;
	}

	.remd-item-box {
		position: relative;
		width: 330rpx;
		height: 200rpx;
	}

	.remd-item-img {
		position: absolute;
		width: 330rpx;
		height: 200rpx;
		border-radius: 10rpx;
	}

	.remd-item-vip {
		position: absolute;
		top: 0;
		right: 12rpx;
		width: 60rpx;
		height: 32rpx;
		border-bottom-left-radius: 10rpx;
		border-bottom-right-radius: 10rpx;
		background-image: linear-gradient(to top, #d8aa5b, #f7dda4);
		align-items: center;
		justify-content: center;
	}

	.remd-item-charge {
		position: absolute;
		top: 0;
		right: 12rpx;
		width: 60rpx;
		height: 32rpx;
		border-bottom-left-radius: 10rpx;
		border-bottom-right-radius: 10rpx;
		background-image: linear-gradient(to top, #ff0000, #ff3674);
		align-items: center;
		justify-content: center;
	}

	.remd-item-charge-text {
		color: #ffffff;
		font-size: 24rpx;
		text-align: center;
	}

	.remd-item-title {
		color: #222222;
		font-size: 28rpx;
		font-weight: 500;
		flex: 1;
		lines: 1;
		text-overflow: ellipsis;
		margin-top: 10rpx;
		height: 40rpx;
	}

	.remd-item-info {
		position: absolute;
		bottom: 0;
		background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.5));
		flex-direction: row;
		flex-wrap: nowrap;
		justify-content: space-between;
		align-items: center;
		padding: 100rpx 20rpx 10rpx 20rpx;
		width: 330rpx;
		height: 150rpx;
		border-bottom-left-radius: 10rpx;
		border-bottom-right-radius: 10rpx;
	}

	.remd-item-info-row {
		flex-direction: row;
		flex-wrap: nowrap;
		align-items: center;
	}

	.remd-item-info-text {
		color: #FFFFFF;
		font-size: 24rpx;
		padding-left: 4rpx;
	}

	/* 评论 */
	.comment {
		flex: 1;
	}

	.comment-item {
		flex-direction: row;
		flex-wrap: nowrap;
		align-items: flex-start;
		padding: 30rpx;
		position: relative;
	}

	.comment-item-headimg {
		width: 80rpx;
		height: 80rpx;
		border-radius: 80rpx;
		margin-right: 10rpx;
	}

	.comment-item-content {
		flex: 1;
		/* margin-right: 70rpx; */
	}

	.comment-item-name {
		font-weight: 500;
		color: #7c7c7c;
		font-size: 28rpx;
	}

	.comment-item-text {
		color: #222222;
		font-size: 28rpx;
		margin-top: 10rpx;
		/* width: 600px; */
	}

	.comment-item-time {
		color: #7c7c7c;
		font-size: 24rpx;
		position: absolute;
		right: 30rpx;

	}

	.fixed-comment {

		background-color: #FFFFFF;
		padding: 24rpx 30rpx;
		box-shadow: 0px -3px 6px rgba(0, 0, 0, 0.16);
	}

	.comment-opt {
		flex-direction: row;
		align-items: flex-end;
		position: relative;
	}

	.comment-input-edit {
		position: absolute;
		top: 10rpx;
		right: 30rpx;
		width: 50rpx;
		height: 50rpx;
	}

	.comment-textarea {
		flex: 1;
		/* height: 70rpx; */

		border-radius: 70rpx;
		padding: 10rpx 40rpx;
		background-color: #f8f8fb;
	}

	.comment-input {
		/* display: block; */
		/* text-align: center; */
		/* line-height: 70rpx; */
		padding: 5rpx 0;
		justify-content: center;
		align-items: center;
		color: #222222;
		font-size: 28rpx;
	}

	.hide_textarea {
		position: absolute;
		top: 0;
		left: 0;
		width: 750rpx;
		height: 98rpx;
		/* background-color: rgba(0, 0, 0, .3); */
	}

	.comment-send {
		/* align-self:flex-start; */
		align-items: flex-end;
		width: 140rpx;
		height: 70rpx;
		line-height: 70rpx;
		border-radius: 70rpx;
		background-color: #dedede;
		background-image: linear-gradient(to right, #dedede, #dedede);
		color: #7c7c7c;
		font-size: 28rpx;
		text-align: center;
		margin-left: 30rpx;
	}

	.comment-send-active {
		color: #ffffff;
		background-image: linear-gradient(to right, #ffc400, #ff7f00);
	}

	.popup-vip {
		width: 652rpx;
		height: 738rpx;
	}

	.popup-vip-bg {
		width: 652rpx;
		/* height: 738rpx; */
	}

	.endText {
		color: #7c7c7c;
		font-size: 24rpx;
		text-align: center;
		margin-top: 20rpx;
		margin-bottom: 20rpx;
		height: 40rpx;
	}
</style>
